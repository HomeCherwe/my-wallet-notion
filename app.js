const express = require("express");
const axios = require('axios');
const fs = require('fs');
const date = new Date();
const { Client } = require("@notionhq/client");

const app = express();
app.use(express.json());



app.use(express.static("public"));

const notion = new Client({
  auth: "secret_mGHc8wQ6V7NVZ0eRzIF9km0UKLupyzPEgNVnn7yz0uz",
});

const urkMonth = [
  "–°—ñ—á–µ–Ω—å",
  "–õ—é—Ç–∏–π",
  "–ë–µ—Ä–µ–∑–µ–Ω—å",
  "–ö–≤—ñ—Ç–µ–Ω—å",
  "–¢—Ä–∞–≤–µ–Ω—å",
  "–ß–µ—Ä–≤–µ–Ω—å",
  "–õ–∏–ø–µ–Ω—å",
  "–°–µ—Ä–ø–µ–Ω—å",
  "–í–µ—Ä–µ—Å–µ–Ω—å",
  "–ñ–æ–≤—Ç–µ–Ω—å",
  "–õ–∏—Å—Ç–æ–ø–∞–¥",
  "–ì—Ä—É–¥–µ–Ω—å",
];

function roundAndRemoveNegative(value) {
  // –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ —á–∏—Å–ª–æ —î –¥—ñ–π—Å–Ω–∏–º
  if (isNaN(value)) {
    throw new Error('Invalid number');
  }

  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—ñ–¥'—î–º–Ω—ñ—Å—Ç—å —ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —á–∏—Å–ª–æ —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ
  const absoluteValue = Math.abs(value);

  // –í—ñ–¥–æ–∫—Ä–µ–º–ª—é—î–º–æ –∫–æ–ø—ñ–π–∫–∏ (–¥–≤—ñ –æ—Å—Ç–∞–Ω–Ω—ñ —Ü–∏—Ñ—Ä–∏) —ñ –æ—Å–Ω–æ–≤–Ω—É —á–∞—Å—Ç–∏–Ω—É —á–∏—Å–ª–∞
  const integerPart = Math.floor(absoluteValue / 100);
  const fractionalPart = absoluteValue % 100;

  // –ó–∞–æ–∫—Ä—É–≥–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —á–∞—Å—Ç–∏–Ω—É –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞
  const roundedIntegerPart = Math.round(integerPart + fractionalPart / 100);

  return roundedIntegerPart;
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function convertTimestampToISO(timestamp) {
  // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ timestamp –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ (—è–∫—â–æ –≤—ñ–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
  const date = new Date(timestamp * 1000);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601
  return date.toISOString();
}

async function getCurrentLinkOfMonth() {
  const myPage = await notion.databases.query({
    database_id: "67857db90ccc4aa79e19815b2a1ab111",
  });

  const test = myPage.results.map((item) => {
    const allMonth = item.properties.Month.title[0].text.content;
    const allMonthLink = item.url;

    return {
      name: allMonth,
      link: allMonthLink,
    };
  });

  const currentMonth = urkMonth[date.getMonth()];

  const foundMonth = test.find((month) => month.name === currentMonth).link;
  const rewLink = foundMonth.split("/")[3];

  return rewLink;
}

async function getAllCaregories() {
  const myPage = await notion.databases.retrieve({
    database_id: "eb90ede7155a4c5697758bc3b563ba7b",
  });
  const res = myPage.properties.Categories.select.options.map(
    (item) => item.name
  );

  return res;
}

async function getBalance() {
  const myPage = await notion.databases.query({
    database_id: "67857db90ccc4aa79e19815b2a1ab111",
  });
  const myBalance = myPage.results.reduce((count, item) => {
    const test = item.properties.Balance.formula.number;
    return (count += test);
  }, 0);

  return myBalance;
}

async function postNewCheck(area, amount, category, note) {
  const linkMonth = await getCurrentLinkOfMonth();
  const myPage = await notion.pages.create({
    icon: {
      type: "external",
      external: {
        url:
          area === "–î–æ—Ö—ñ–¥"
            ? "https://www.notion.so/icons/arrow-up-basic_green.svg"
            : "https://www.notion.so/icons/arrow-down-basic_red.svg",
      },
    },
    parent: {
      type: "database_id",
      database_id: "eb90ede7155a4c5697758bc3b563ba7b",
    },
    properties: {
      Amount: {
        title: [
          {
            text: {
              content: "‚Ç¥" + amount,
            },
          },
        ],
      },
      Categories: {
        select: {
          name: category,
        },
      },
      Area: {
        select: {
          name: area,
        },
      },
      Notes: {
        rich_text: [
          {
            text: {
              content: note,
            },
          },
        ],
      },
      Month: {
        relation: [
          {
            id: linkMonth,
          },
        ],
      },
    },
  });

  //   return res;
}

async function postNewCheckMonoBank(area, amount, note, card, id, date) {
  const linkMonth = await getCurrentLinkOfMonth();
  const myPage = await notion.pages.create({
    icon: {
      type: "external",
      external: {
        url:
          area === "–î–æ—Ö—ñ–¥"
            ? "https://www.notion.so/icons/arrow-up-basic_green.svg"
            : "https://www.notion.so/icons/arrow-down-basic_red.svg",
      },
    },
    parent: {
      type: "database_id",
      database_id: "eb90ede7155a4c5697758bc3b563ba7b",
    },
    properties: {
      Amount: {
        title: [
          {
            text: {
              content: "‚Ç¥" + amount,
            },
          },
        ],
      },
      Categories: {
        select: {
          name: "MonoBank",
        },
      },
      Area: {
        select: {
          name: area,
        },
      },
      Notes: {
        rich_text: [
          {
            text: {
              content: note,
            },
          },
        ],
      },
      "Create Time MonoBank": {
        date: {
          start: date
        }
      },
      ID: {
        rich_text: [
          {
            text: {
              content: id,
            },
          },
        ],
      },
      Card: {
        select: {
          name: card,
        },
      },
      Month: {
        relation: [
          {
            id: linkMonth,
          },
        ],
      },
    },
  });

  return true;
}

// –ó–∞–ø–∏—Ç–∏ --------------------------------------------------------------

app.get("/", (req, res) => {
  res.send("Hey this is my API running ü•≥");
});

app.get("/api/categories", async function (req, res) {
  const categories = await getAllCaregories();
  res.send(categories);
});

app.get("/api/balance", async function (req, res) {
  const balance = await getBalance();
  res.send(`${balance}`);
});

app.post("/api/users", async function (req, res) {
  if (!req.body) return res.sendStatus(400);

  const amount = req.body.amount;
  const category = req.body.category;
  const area = req.body.area;
  const note = req.body.note;

  const resp = await postNewCheck(area, amount, category, note);

  res.send(resp);
});

app.post("/api/syncMonoBank", async function (req, res) {
  if (!req.body) return res.status(400).send("Bad request: No body provided");

  const xToken = req.body.api;
  const id_black = 'i6cWTK5hVISHvp46fbr_Lg';
  const id_white = 'biyChSHTk1jAMkBnM06R_g';

  const id_cards = [id_black, id_white];

  try {
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏
    const results = await Promise.all(id_cards.map(async (id_card) => {
      const to = Math.floor(Date.now() / 1000);
      const from = Date.now() - (10 * 24 * 60 * 60 * 1000);
      const url = `https://api.monobank.ua/personal/statement/${id_card}/${from}/${to}`;
  
      const response = await axios.get(url, { headers: { 'X-Token': xToken } });
      return response.data.map(item => ({ ...item, card: id_card }));
    }));

    // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤
    const allData = results.flat();

    // –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ –∑–∞ timestamp
    const sortedData = allData.sort((a, b) => a.time - b.time);
    console.log(sortedData)

    // –í–∞—à–∞ –ø–æ–¥–∞–ª—å—à–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
    const today = new Date();
    const pastDate = new Date(today);
    pastDate.setDate(today.getDate() - 10);
    const formattedDate = pastDate.toISOString().split('T')[0];
  
    const myPage = await notion.databases.query({
      database_id: "eb90ede7155a4c5697758bc3b563ba7b",
      filter: {
        property: "Created time",
        created_time: { on_or_after: formattedDate }
      }
    });
  
    const billing_notion_ids = myPage.results.map(item => item.properties.ID.rich_text[0]?.text.content || '');
  
    const processItems = sortedData.map(async (item) => {
      const card = id_black === item.card ? 'Mono Black' : 'Mono White';
      
      if (billing_notion_ids.includes(item.id)) {
        console.log(`Item ID ${item.id} exists in Notion`);
        return false;
      } else {
        const amount = roundAndRemoveNegative(item.amount) + roundAndRemoveNegative(item.cashbackAmount);
        const area = item.amount < 0 ? '–í–∏—Ç—Ä–∞—Ç–∞' : '–î–æ—Ö—ñ–¥';
        const note = `${item.description}${item.comment ? `\n${item.comment}` : ''}`;
        const id = item.id;
        const date = convertTimestampToISO(item.time);

        const resp = await postNewCheckMonoBank(area, amount, note, card, id, date);
        console.log(`Posted new check for ID ${item.id}`);

        return true;
      }
    });

    const responses = await Promise.all(processItems);
    const countTrue = responses.filter(value => value === true).length;
    res.status(200).send(`–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π - ${countTrue}`);

  } catch (error) {
    console.error('Error processing request:', error);
    res.status(500).send(`Internal server error: ${error.message}`);
  }
});

// –ó–∞–ø–∏—Ç–∏ ---------------------------------------------------------------------------

app.listen(3000, function () {
  console.log("–°–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");
});

module.exports = app;